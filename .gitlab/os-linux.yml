# Linux-specific builder configurations and build commands

## Base images

### CentOS
#
# CentOS 7 is the primary deployment platform. This gains us maximum
# compatibility with many Linux distros while also providing easy ways to get
# newer compilers.

.linux:
    variables:
        GIT_CLONE_PATH: $CI_BUILDS_DIR/gitlab-kitware-sciviz-ci
        GIT_SUBMODULE_STRATEGY: none

.centos7:
    extends: .linux
    image: "kitware/paraview:ci-centos7-20201103"

    variables:
        LAUNCHER: "scl enable devtoolset-7 --"

.fedora33:
    extends: .linux
    image: "kitware/paraview:ci-fedora33-20201118"

.fedora31_icc:
    extends: .linux
    image: "kitware/paraview:ci-fedora31-icc-20201014"

    variables:
        CC: icc
        CXX: icpc

.fedora_mpich_addon:
    variables:
        CMAKE_PREFIX_PATH: /usr/lib64/mpich
        LD_LIBRARY_PATH: /usr/lib64/mpich/lib

.fedora_openmpi_addon:
    variables:
        # Needed to work with OpenMPI
        OMPI_ALLOW_RUN_AS_ROOT: 1
        OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
        CMAKE_PREFIX_PATH: /usr/lib64/openmpi
        LD_LIBRARY_PATH: /usr/lib64/openmpi/lib

.fedora31_shared_icc_mpi_python:
    extends:
        - .fedora31_icc
        - .fedora_openmpi_addon

    variables:
        CMAKE_CONFIGURATION: fedora31_shared_icc_mpi_python

.fedora33_static_mpi_offscreen_osmesa_python:
    extends:
        - .fedora33
        - .fedora_mpich_addon

    variables:
        CMAKE_CONFIGURATION: fedora33_static_mpi_offscreen_osmesa_python

.linux_builder_tags:
    tags:
        - build
        - docker
        - linux
        - paraview

.linux_tester_tags:
    tags:
        - docker
        - paraview
        - linux
        - x11

## Linux-specific scripts

.before_script_linux: &before_script_linux
    - .gitlab/ci/cmake.sh
    - .gitlab/ci/ninja.sh
    - .gitlab/ci/doxygen.sh
    - .gitlab/ci/sccache.sh
    - export PATH=$PWD/.gitlab:$PWD/.gitlab/cmake/bin:$PWD/.gitlab/doxygen/bin:$PATH
    - cmake --version
    - ninja --version
    - doxygen --version
    - "git submodule update --init --recursive || :"
    - git submodule foreach --recursive cmake "-Dusername:STRING=$CI_PROJECT_NAMESPACE" "-Durl_prefix:STRING=https://$CI_SERVER_HOST" -P "$PWD/.gitlab/ci/fetch_submodule.cmake"
    - git submodule sync --recursive
    - git submodule update --init --recursive
    # Enable the Intel compiler if required.
    - '[ "$CC" = "icc" ] && source /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh intel64 || true'

.cmake_build_linux:
    stage: build

    script:
        - *before_script_linux
        - sccache --start-server
        - sccache --show-stats
        - $LAUNCHER ctest -VV -S .gitlab/ci/ctest_configure.cmake
        - $LAUNCHER ctest -VV -S .gitlab/ci/ctest_build.cmake &> $GIT_CLONE_PATH/compile_output.log
        - sccache --show-stats

    interruptible: true

.cmake_test_linux:
    stage: test

    script:
        - *before_script_linux
        - ctest -V --output-on-failure -S .gitlab/ci/ctest_test.cmake

    interruptible: true

.spack_build_linux:
    stage: build

    variables:
        # This is needed as `configure` on certain packages fails when run as
        # root
        FORCE_UNSAFE_CONFIGURE: 1

        spack: "$CI_BUILDS_DIR/spack/bin/spack -C Utilities/spack/configs/gitlab-ci"
        paraview_spec: "paraview+osmesa^mesa~glx^mpich"

    before_script:
        - .gitlab/ci/sccache.sh
        - .gitlab/ci/cmake.sh
        - export PATH=$PWD/.gitlab:$PWD/.gitlab/cmake/bin:$PATH
        - cmake --version
        - "git submodule update --init --recursive || :"
        - git submodule foreach --recursive cmake -P "$PWD/.gitlab/ci/fetch_submodule.cmake"
        - git submodule sync --recursive
        - git submodule update --init --recursive
        - sccache --start-server
        - sccache --show-stats
        - .gitlab/ci/spack.sh
        - $LAUNCHER $spack repo add $PWD/Utilities/spack/repo
        - $LAUNCHER $spack compiler find
        - $LAUNCHER $spack compiler info gcc@7.3.1
        # setup buildcache mirror
        - $LAUNCHER $spack mirror add local $PWD/spack-cache
        - $LAUNCHER $spack buildcache list
    script:
        - TRACK="Experimental"
        - if [ "$CI_PIPELINE_SOURCE" == "schedule" ] && [ "$CI_PROJECT_PATH" == "paraview/paraview" ]; then TRACK="master-packages" ; fi
        - if [ "$CI_MERGE_REQUEST_ID" ]; then TRACK="merge-requests" ; fi
        - $LAUNCHER $spack spec $paraview_spec
        - $LAUNCHER $spack install --no-check-signature --only dependencies -j $(nproc) $paraview_spec
        - export dependency_specs=`$LAUNCHER $spack find --format "{name}{@version}{%compiler}"`
        - $LAUNCHER $spack buildcache create -a -f -u -d $PWD/spack-cache $dependency_specs
        - $LAUNCHER $spack install --no-check-signature -j $(nproc) --cdash-upload-url="http://open.cdash.org/submit.php?project=ParaView" --cdash-track $TRACK --cdash-build="paraview-spack-$CI_COMMIT_REF_NAME" $paraview_spec
        - eval `$spack load --sh paraview`
        - pvserver --version
        - .gitlab/sccache --show-stats

    interruptible: true
    timeout: 3 hours
    cache:
        key: spack:centos7
        paths:
            - spack-cache/

.doxygen_build_linux:
    stage: build
    environment:
      name: documentation
      url: https://kitware.github.io/paraview-docs/latest/cxx/

    needs: []

    script:
        - *before_script_linux
        - test -n "$GITHUB_SSH_PRIVATE_KEY" && GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no -i $GITHUB_SSH_PRIVATE_KEY"
        - test -n "$GITHUB_SSH_PRIVATE_KEY" && chmod 600 $GITHUB_SSH_PRIVATE_KEY
        - test -n "$GITHUB_SSH_PRIVATE_KEY" && PARAVIEW_DOCS_REPO="ssh://git@github.com/kitware/paraview-docs"
        - git clone $PARAVIEW_DOCS_REPO paraview-docs
        - mkdir -p build
        - cd build
        - echo "$PARAVIEW_DOCS_REPO  $GIT_SSH_COMMAND"
        - $LAUNCHER cmake -DCMAKE_PREFIX_PATH=/usr/lib64/openmpi -DPARAVIEW_USE_PYTHON=ON -DVTK_WRAP_PYTHON=ON \
          -DVTK_ENABLE_WRAPPING=ON -DPARAVIEW_BUILD_DEVELOPER_DOCUMENTATION=ON -DPARAVIEW_USE_MPI=ON \
          -DPARAVIEW_BUILD_EDITION=CATALYST -DDOCUMENTATION_HTML_TARZ=ON ..
        - cmake --build . -j &> $GIT_CLONE_PATH/compile_output.log
        - make ParaViewDoc-TGZ &> $GIT_CLONE_PATH/doxygen_output.log
        - cd $GIT_CLONE_PATH/paraview-docs
        - test -n "$CI_COMMIT_TAG" && CURRENT_RELEASE="$CI_COMMIT_TAG"
        - test -n "$GITHUB_SSH_PRIVATE_KEY" && $LAUNCHER bash -x ./scripts/prepare-doc.sh "$GIT_CLONE_PATH" "$GIT_CLONE_PATH/build" "$GIT_CLONE_PATH" "$CURRENT_RELEASE" &> $GIT_CLONE_PATH/prepare_output.log
        - tar czf $GIT_CLONE_PATH/paraview-docs-doxygen.tgz $GIT_CLONE_PATH/build/doc

    variables:
        PARAVIEW_DOCS_REPO: https://github.com/Kitware/paraview-docs.git
        CURRENT_RELEASE: nightly
        GIT_SSH_COMMAND: ""
        PARAVIEW_DOC_UPLOAD: "true"

    interruptible: true
    timeout: 3 hours
